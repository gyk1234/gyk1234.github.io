[{"title":"JDBC基础连接和使用","date":"2019-11-08T02:02:24.385Z","path":"2019/11/08/JDBC基础连接和使用/","text":"JDBC: Java DataBase Connectivity java数据库连接 java语言操作数据库 JDBC本质:其实就是官方(sun)公司定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口(JDBC)编程，真正的代码是驱动jar包的是实现类。 1快速入门: 步骤: \\1. 导入驱动jar包 mysql-conerctor -java-5.1.37-bin.jar 1.复制mysql-conerctor -java-5.1.37-bin.jar到项目的libs目录下 2.右键-àAdd As Librar ​ 2.注册驱动 ​ 3.获取数据库连接对象Connection ​ 4.定义SQL语句 ​ 5.执行SQL语句的对象，Statement ​ 6.执行SQL,接受返回结果 ​ 7.处理结果 ​ 8.释放资源 package jdbc.day01.demo01; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.sql.Statement; /\\* JDBC 使用基础* */* public class jdbcDemo01 { public static void main(String[] args) throws Exception { //1,**导入驱动jar包* //2.**注册驱动 这个字符串是jar包中的Driver的存放位置***\\ Class.forName(“com.mysql.jdbc.Driver”); //3.**获取数据库连接对象 参数分别为 url username password* Connection conn = DriverManager.*getConnection(“jdbc:mysql://localhost:3306/db1”, “root”, “root”); //4.**定义SQL语句** String sql=“update account set balance=500 where id = 1”; //5.**获取执行SQL的对象，Statement** Statement stmt = conn.createStatement(); //6.**执行sql语句** int count = stmt.executeUpdate(sql); //7**处理结果** System.out\\.println(count); //8**释放资源** stmt.close(); conn.close(); } }"},{"title":"Mysql数据库知识点总结","date":"2019-11-07T08:20:16.681Z","path":"2019/11/07/Mysql数据库知识点总结/","text":"MySQL是一种开放源代码的关系型数据库管理系统（RDBMS），使用最常用的数据库管理语言–结构化查询语言（SQL）进行数据库管理。 MySQL是开放源代码的，因此任何人都可以在General Public License的许可下下载并根据个性化的需要对其进行修改。 MySQL因为其速度、可靠性和适应性而备受关注。大多数人都认为在不需要事务化处理的情况下，MySQL是管理内容最好的选择。 1Mysql数据库知识点总结 一、基本概念 1、数据库服务器 我们可以理解为数据库服务器即是一台内存较高的计算机，可以在上面运行数据库管理软件 2、数据库管理系统 如Mysql,是一个软件，用来管理数据库的软件 3、数据库 即文件夹，用来组织文件 4、表 即文件，用来存放多条记录，每条记录为多个字段组成的一行数据 二、Mysql基本介绍 Mysql是目前WEB应用最好的RDBMS（Relation Database Mangement System)关系数据库管理系统之一 关系型数据库是将数据保存到不同的表里面，而不是将数据放到一个大仓库内 关系型数据库与非关系型数据库的区别是：关系型数据库有表结构，非关系型数据库是通过key-value存储，无表结构 Mysql使用的是标准的SQL数据语言形式，支持多种语言，支持5000万条的数据仓库，32位系统表文件最大支持4GB，64位系统最大支持表文件为8TB 通俗的讲：Mysql就是一个基于socket编写的C/S架构的软件 储存引擎 mysql默认的查询引擎为innodb，可以自行进行更改 语法： win： 启动mysql服务端，在cmd窗口运行mysqld 数据库初始化命令：mysql-initialize-insecure 启动mysql客户端，并连接服务端mysql -uroot -p 连接其他ip数据库,mysql -u账号 -hIP地址 -P端口号 -p密码 查看当前登陆用户：select user( ) 刷新权限，执行命令:flush privileges; 查看进程：tasklist | findstr mysql 杀死进程：tasklist /F /PID 进程号 mac： 设置新密码：set password for ‘用户名‘@’IP地址’=password(‘’); 查看系统进程:ps -A 杀死系统进程：sudo kill -9 PID 操作文件夹（库）: 增加一个库：create database db1 charset utf8; 查看所有库: show databases; 查看特定库: show create database db1; 删库跑路: drop database db1; 操作文件（表）： 切换进数据库：use db1; 查看当前所在文件夹；select database( ); 增加表：create table t1(id int,name char(6)); 查看特定表：show create table t1; 查看所有表：show tables;或者desc t1; 改： alter table t1 modify name char(10);name字段改为10字节； alter table t1 modify name NAME char(10）;name字段名改成NAME 复制表 即复制表数据也复制表结构：create table t1 select * from db1.t1; 只复制表结构create table a1 like db1.t1; 清空表 delete from t1;但是这种方法会保留自增的ID truncate table t1;这种方法不会保留自增ID 操作文件内容 增加内容：insert into (id,name) values(1,’aa’),(2,’bb’),(3,’cc’); 查看内容：select * from db1.t1; 删除内容：delete from t1 where id =1; 查看用户权限：select * from mysql.user where user=’root’\\G; 三、SQL数据类型 SQL之中没有bool值,tinyint[1]表示true;tinyint[0]表示fasle. int数据类型后面存储的是显示宽度，而不是存储宽度，其他的数据类型则表示的是存储宽度 now（）sql中的内置函数，根据数据类型生成相对应的时间模式 char( )定长字符串，存储速度快，但是浪费空间 varchar（ ）变长字符串，存储速度慢，可是节省空间 enum() 表示枚举 多选一 set（ ）表示集合 多选多 四、约束：作用是保证数据的完整性和一致性 not null 表示该字段数据不能为空 default 表示该字段的默认值 unique 唯一（列唯一，组合唯一） primary key 主键 一张列表中只允许出现一个主键（not null + unique） auto-increment 自增长 foregin key 外键 建立两个表之间的联系 语法 constraint fk_dep foreign key(关联列名) references 被关联表（被关联列） on delete cascade 同步删除 on update cascade 同步更新 五、查询： 单表查询的关键字执行顺序 from 说明是来自那一张表 where 条件 后面可以跟比较运算符 between and in(. ). like（%表示任意字符 _表示一个字符）逻辑运算符 group by 以某个字段的值进行分组，发生在where之后，查看组类信息依赖于聚合函数max min avg sum count having 过滤，在group by 后面的条件筛选 order by 排序 asc升序 desc降序 limite 限制查询 记录数 limte a, b. a表示从第a个开始，b表示查询b条 多表连接查询 语法：select 字段 from t1 inner/left/right join t2 on t1.字段=t2.字段； inner 表示只显示连接匹配的行 left：优先显示左表的全部记录 right：优先显示右表的全部记录 子查询中的关键字 in/not in：查询的结果是否在子表中 运算符：= &lt; &gt; != exits:表示存在，使用此关键字时，内层查询语句不返回查询的记录，而是返回一个布尔值，当此布尔值为真时外层语句进查询，反之不进行查询 六、pymysql简单使用 连接：conn=pymysql.connect(host=’IP’,port=端口号,user=’root’,password=’’,db=db1,charset=’utf8’) 创建游标：cursor=conn.cursor( ) 写sql语句：sql=‘’ 执行sql语句，返回在数据库中查询成功的记录行数，result=cursor.execute(sql);在result中可以进行字符的拼接，execute（sql,[user,pwd]),即execute注入，防治恶意语法 使用mysql模块进行增删改操作时需使用commit( )方法进行提交，否则数据库更改不生效;conn.commit( ) 查询操作：fetchone( )获取下一行数据，从第一行开始；fetchall( )获取所有行数据，;fetchany(n)，获取n行数据 查询操作默认返回的是元组，使用如下语句获取游标，改变cursor属性，会返回字典：cursor=conn.cursor(cursor=pymysql.cursors.DictCursor) 移动指针： cursor.scroll(1,mode=’relative’)相对定位，相对当前位置向下移动 cursor.scroll(1,mode=’abusolute’绝对定位，相对左上角向下移动 关闭连接，游标和连接都需要关闭：cursor.close( ). conn.close( ) 七、索引 索引的作用：约束和加速查找 无索引的时候一般会 从前至后一条条查找 有索引的时候：创建索引的本质就是创造额外的文件，查询时先去额外的文件找，定好位置，再去原始表直接查询，提高查询速度，但是增删改的速度依然慢，创建索引后必须命中索引才有效 索引的分类 1、普通索引：加速查询 加入索引：create index 索引名 on 表名(列名） 删除索引: drop index 索引名 on 表名 查看索引:show index from 表名 2、唯一索引：加速查找和唯一约束（可含null） 加入索引：create unique index 索引名 on 表名（列名） 删除：drop index 索引名 on 表名 3、主键索引 加入索引:alter table 表名 add primary key(列名） 删除索引：alter table 表名 drop primary key（列名）和alter table 表名 modify 列名 int,drop primary key 4、组合索引：将多个列组合成一个索引 创建组合索引：create iindex 索引名 on 表名（列1，列2） 在使用组合索引时，若组合索引为(name,email),单独索引email时不走索引，这称为最左前缀匹配原则，最左匹配原则中，mysql会一直向右匹配知道遇到（&lt; &gt; between like)这一类的范围查询时停止 explain + sql查询语句，用于查询sql执行信息参数 在使用关键字‘like’查询时：like ‘n%’ 走索引；但是like ‘%n%’不走索引，即有且仅只有后面带上%时走索引 使用函数时索引不生效"},{"title":"Github博客搭建","date":"2019-11-06T06:09:28.407Z","path":"2019/11/06/Github博客搭建/","text":"一、前期准备 二、软件安装 三、Hexo配置流程 四、部署到GitHub服务器 五、发布博客内容 Github个人技术博客搭建步骤一、前期准备 1、GitHub账号 注册地址：https://github.com/ 2、Node.js环境 下载地址：https://nodejs.org/download/ 3、Git 软件：下载地址http://git-scm.com/download/ 二、软件安装 1、注册GitHub账号 1)Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，此处账号名作为后期个人博客的地址使用2。并且需要勾选Initialize this repository with a README。（如果没有勾选，后期要创建README文件即可） 2)创建一个新的repository(代码仓库), 注意，名称必须是xxx.github.io 格式，并且xxx必须是你在GitHub的用户名。 3)在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，可以访问它。你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。 2.安装Node.js 在node.js指定地址下载，采用最新的版本即可。 本文实例以v10.16.3 版本为例，其他版本类似， 安装步骤： 步骤 1 : 双击下载后的安装包 v10.16.3，如下所示： 步骤 2 : 点击以上的Run(运行)，将出现如下界面： 步骤 3 : 勾选接受协议选项，点击 next（下一步） 按钮 : 步骤 4 : Node.js默认安装目录为 “C:\\Program Files\\nodejs&quot; , 你可以修改目录，并点击 next（下一步）： 步骤 5 : 点击树形图标来选择你需要的安装模式 , 然后点击下一步 next（下一步） 步骤 6 :点击 Install（安装） 开始安装Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）： 安装过程： 点击 Finish（完成）按钮退出安装向导。 检查Node.js版本 3.安装Git 指定位置，进行下载 步骤1：从git官网下一个git安装包并安装。这里以64位讲解Git-2.23.0-64-bit.exe 步骤2：点击git.exe安装程序，点击【next】，根据自己的情况，选择程序的安装目录。 步骤3：继续点击“Next”，显示截图如下： 步骤4：.选择完之后，点击“Next”，显示截图如下： 步骤5：.点击“Next”，显示截图如下： 选择编辑器，看自己喜好。 步骤6：继续点击“Next”，设置环境变量 步骤7：选择之后，继续点击“Next”，显示如下： 步骤8：选择之后，继续点击“Next”，显示如下： 步骤9：选择之后，继续点击“Next”，显示如下： 步骤10：.选择之后，继续点击“Next”，显示如下： 步骤11：选择之后，继续点击“Next”，显示如下： 步骤12：选择之后，点击“Install”，显示如下： 步骤13：安装完毕后，点击“finish” 验证是否安装成功，在桌面上点击鼠标右键，点击Git Bash Here，弹出交互界面，表示正确安装成功！ 三、Hexo配置流程 1、安装Hexo Hexo 是一款基于 Node.js 的静态博客框架。Hexo 使用 Markdown 解析文章，用户在本地安装Hexo并进行写作，通过一条命令，Hexo即可利用靓丽的主题自动生成静态网页。 1）新建文件夹hexo 首先创建一个文件夹，用来存放Hexo模板和项目，然后进入 hexo 文件夹，鼠标右键点击Git Bash Here。 2）安装hexo基础框架 // 这是安装hexo的基础框架（此处要求已经安装了node.js环境） 第一步：npm install hexo-cli -g 第二步：`hexo init blog ``` 它就会在当前目录下生成一个blog的文件夹，并在里面生成相关配置信息。 第三步：cd blog 切换到blog目录下 第四步：npm install 安装必备的组件，安装完成之后，blog文件夹的目录结构大致如下： // 编译生成静态页面，会在当前目录下生成一个新的叫做public的文件夹。 第五步：hexo g `` // 启动本地服务 第六步：hexo s `` 打开链接http://localhost:4000，看到这样的网页就成功啦。 1 2、 hexo主题设置，这里以主题yilia为例进行说明。 1）安装主题（此处当前目录为blog） git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 2）启用主题 cd themes/yilia git pull //获取远程内容 3） 修改配置文件 修改hexo目录下的_config.yml配置文件中的theme属性，将其设置为我们前面克隆下来的主体样式，此处theme: yilia 4） 重启服务 切换到blog目录 hexo g # 重新生成静态文件 hexo s # 启动本地web服务器 现在打开http://localhost:4000，会看到我们已经应用了一个新的主题。 四、部署到GitHub服务器1、使用git命令行部署（optional） 此处我们采用git命令来完成部署的工作。 1) cd d:/hexo/blog 2) git clone https://github.com/fang235/fang235.github.io .deploy/fang235.github.io 将我们之前创建的repo克隆到本地，新建一个目录叫做.deploy用于存放克隆的代码。 3) hexo generate //生成静态文件 cp -R public/* .deploy/fang235.github.io //复制文件 cd .deploy/fang235.github.io //切换目录 git add . //将需要提交的代码添加到暂存区 git commit -m “update” //将暂存区内容提交给本地版本库 git push //推送给远程服务器 简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至fang235.github.io的git目录下，然后使用git commit命令提交代码到fang235.github.io这个repo的master branch上。 需要部署的时候，执行第三个步骤。执行过程中可能需要让你输入Github账户的用户名及密码，按照提示操作即可。 2、 验证 打开浏览器，输入地址：https://fang.github.io/ ，就可以看到我们的博客上线了哈哈哈！！！ 五、发布博客内容1、创建博客标题 hexo new “post title with whitespace” 2、编写博客内容 找到创建的md文件，使用编辑器打开，按照Markdown的格式，编写博客内容，编写完成之后，执行以下代码，将博客内容推送到远程服务器上。 hexo generate //生成静态文件 cp -R public/* .deploy/fang235.github.io //复制文件 cd .deploy/fang235.github.io //切换目录 git add . //将需要提交的代码添加到暂存区 git commit -m “update” //将暂存区内容提交给本地版本库 git push //推送给远程服务器"},{"title":"安装Tomcat","date":"2019-11-06T05:51:03.935Z","path":"2019/11/06/安装Tomcat/","text":"关于Eclipse和MyEclipse在Tomcat服务器上的配置！ Eclipse1.安装Tomcat步骤网址：https://jingyan.baidu.com/article/e8cdb32be15b0437052bad17.html2.Eclipse环境下如何配置Tomcat，并且把项目部署到Tomcat服务器上：https://blog.csdn.net/yerenyuan_pku/article/details/518301043、如何在eclipse中修改jsp的编码为UTF-8：https://blog.csdn.net/hanqiuyue123/article/details/89414261MyEclipse1. MyEclipse启动Tomcat，把项目部署到Tomcat服务器上：https://jingyan.baidu.com/article/fea4511ad81682f7bb912501.html"},{"title":"jsp知识点","date":"2019-11-06T02:44:40.960Z","path":"2019/11/06/jsp知识点/","text":"*jsp原理：(jsp就是Servlet) 在我们访问jsp文件的时候，并没有直接去执行JSP文件，而是被服务器所拦截执行了jspServlet的类。此类会将jsp文件转译成对应的Servlet文件并执行。所以jsp本质还是Servlet。 1jsp原理： (jsp就是Servlet) 在我们访问jsp文件的时候，并没有直接去执行JSP文件，而是被服务器所拦截执行了jspServlet的类。此类会将jsp文件 转译成对应的Servlet文件并执行。所以jsp本质还是Servlet。 jsp的使用： 11、常用指令集： ​ page ​ language 声明jsp文件支持的语言 ​ import 转译的时候导入的包 ​ pageEncoding –&gt;设置转译及客户端展现数据的编码格式 ​ session –&gt;true代表使用session对象(默认) false不使用session对象 ​ errorPage –&gt;jsp运行错误会自动跳转到指定的页面 include: 静态引入： ​ 转译成一个Servlet类(不能出现同名的变量)，耦合性高 动态引入： ​ 转译成两个Servlet类(可以出现同名的变量)，耦合性低 forward: ​ 请求转发（自带return）: ​ &lt;jsp:forward page=”要转发的文件路径”&gt; ​ &lt;jsp:param value=”值” name=”键”/&gt; ​ 12、java代码段声明 ​ &lt;%java代码%&gt;—会被转译到_jspService方法中，局部代码 13、全局代码段声明 ​ &lt;%!声明方法%&gt;—-会被转译成全局代码 14、表达式语句(重要) ​ &lt;%=变量名/方法 %&gt;—后面不能加分号 注意：一定不要加分号，等价于out.write()，会将里面的值响应给客户端 15、九大内置对象： ​ 四个作用域： pageContext 页面上下文对象，此对象封装了其他对象的获取方式，当前页(了解) request 其实就是请求对象，使用方式和Servlet一致 session 其实就是session对象 application 其实就是ServletContext对象 两个输出： out 输出对象 response 输出对象，比resp对象多了缓冲区，效率提高 三个打酱油： page 代表被页面对象 config ServletConfig exception 异常对象，摒弃了 16、注释 ​ HTML注释： ​ 会被转译，还会被发送到客户端 css注释： ​ 会被转译，还会被发送 js注释： ​ 会被转译，还会被发送 java注释 ​ 会被转译 jsp注释： ​ %– 注释内容 –% 直接不转译"},{"title":"java面向对象总结","date":"2019-11-06T01:52:55.117Z","path":"2019/11/06/java面向对象总结/","text":"面向对象（Object Oriented）是一种新兴的程序设计方法，或者是一种新的程序设计规范(paradigm)，其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计。从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式。面向对象是为了解决系统的可维护性，可扩展性，可重用性…. 1第二章 类和对象 1、面向对象的概念：面向对象是把一个项目，一件事情，从头到尾一步一步执行，直到结束。2、类的创建public class 类名{}File——&gt;new –&gt;class –&gt;类名3、创建对象类名 对象名=new 类名();对象名.方法名(); 对象名.属性4、构造方法方法名和类名相同，无返回值public class 类名{ public 类名(){}//主要的作用是初始化操作}5、构造方法的重载在同一个类中，方法名相同，参数个数，顺序，类型不同的构造方法public class 类名{ public 类名(String Name，int age){}}6、构造方法的执行（1）、new 类名();—&gt;执行（2）、Super();—&gt;执行父类7、static静态修饰符可以修饰属性，方法，代码块类名.属性 类名.方法名8、Java内存(gc（垃圾回收机制）) 1第三章 面向对象三大特征--封装 1、封装的概念：把一个对象的属性私有化，同是提供一些可以被外界访问属性的方法2、封装的步骤（1）、把属性私有化（private）（2）、对这些属性设置get和set方法（3）、set赋值，get取值3、封装的作用避免一些不合乎常理的操作4、修饰符public （公共的）在一个项目中都可以访问，权限最高private（私有的）只能在本类中进行访问protected（受保护的）在同一个包中进行访问 在继承中子类可以访问父类defauit（默认的）同一个类，同一个包能访问 1第四章 面向对象三大特征--继承 1、继承的概念父子之间的关系2、继承的关键字：extends3、继承的语法public class 类名 extends 父类{}4、继承的说明（1）、一个父类可以有多个子类，但一个子类只能有父类（2）、子类继承了父类的所有属性和方法，但是只能调用非private属性和方法（3）、可以多层继承5、继承使用在子类中可以直接调用父类的非private属性和方法可以用super.方法 super.属性6、父类构造方法的调用：super();（1）、调用父类的构造方法必须在子类中调用（2）、必须在子类的构造方法的第一行代码7、重写@Ovrride（1）、必须继承（2）、方法名一致，参数个数，顺序，类型全部一致 1第五章 面向对象（多态） 1.多态的概念 2.多态的必要条件 （1）继承 （2）重写 （3）父类引用指向子类对象（向上转型） 3.多态的使用 public class Father{ public void cooking(){ System.out.println(“米饭”); } } public class Son extends Father{ @Override public void cooking(){ System.out.println(“熬粥”); } } public class Test { public static void main(String[] args) { Father son=new Son(); son.cooking(); } } 4.向下转型 Son son=(Son)father; 1第六章 抽象 1.抽象的概念 2.抽象的关键字 abstract 可以修饰类，可以修饰方法 3.抽象的用法 //抽象类 public abstract class 类名{ //抽象方法没有方法体 public abstract void 方法名(); } //当父类是抽象类的时候，子类必须重写父类里面的抽象方法 4.final修饰符：最终的 修饰变量，修饰方法，修饰类 1.当修饰变量时，变量转换成常量，常量的值不能改变 final int a=18;//a=18;不能改变,必须给一个初始值 2.当修饰方法时，该方法不能被重写 3.当修饰类时，该类不能被继承 1第七章 接口 1.接口的概念 2.接口的关键字 interface 3.接口的语法 public interface 接口名{} File—&gt;new—&gt;interface//创建接口 4.接口的用法 实现接口的关键字 implements public interface 接口名{ //接口是纯抽象类 //接口里面的方法都是抽象方法 void setData(); } public class Play implements 接口名{ @Override void setData(){ } } public class Test { public static void main(String[] args) { Play play=new Play(); play.setData(); } } 注意接口可以进行多继承 public interface 接口名 extends 接口名，接口名{} 一般用法 public class 类名 extends 父类 implements 接口，接口{} 1第八章 集合框架 1.ArrayList 用法： ArrayList list=new ArrayList(); list.add();//添加数据 list.get();//获取数据 2.Map 用法： Map map=new HasMap(); map.put(key,value);//key不能重复 map.get(key);//获取key对象的value 3.泛型 ArrayList list=new ArrayList&gt;(); Map&lt;String,String&gt; map=new HasMap&lt;String,String&gt;(); ArrayList&lt;Map&lt;String,String&gt;&gt; list=new ArrayList&gt;&lt;Map&lt;String,String&gt;&gt;();"},{"title":"Hello World","date":"2019-11-05T02:17:07.954Z","path":"2019/11/05/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]